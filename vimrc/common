"" To install/update/remove plugins from vimrc-common:
"" :source %
"" then:
"" to install plugins: :PlugInstall
"" to update plugins:  :PlugUpdate
"" to remove plugins:  :PlugClean

set encoding=utf-8
syntax on
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set t_Co=256
set background=dark
set shiftwidth=4
set hlsearch
set nofoldenable
set nocompatible
set wildmenu
set cursorline
set cursorcolumn
set showcmd
set smartindent
set smartcase
set nowrap
set ttyfast
set backspace=indent,eol,start
set updatetime=300
set shortmess+=c

let g:go_version_warning = 0

"""" plugged
call plug#begin('~/.vim/plugged')
" Helpers
Plug 'nathanaelkane/vim-indent-guides'
" Automatic closing of brackets
Plug 'raimondi/delimitMate'
" Vim tmux intergration
Plug 'christoomey/vim-tmux-navigator'
" statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Git integration
Plug 'tpope/vim-fugitive'
" shows git diff markers
Plug 'airblade/vim-gitgutter'
" syntax checks
Plug 'scrooloose/syntastic'
" Code Snippet
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
" Change quotes to doublequotes
Plug 'tpope/vim-surround'
" fuzyy finder
Plug 'junegunn/fzf'
" file system explorer, similar to ranger/ranger
Plug 'scrooloose/nerdtree'
" Check syntax
Plug 'dense-analysis/ale'
" nerdy commenting powers
Plug 'scrooloose/nerdcommenter'
" languagepack collecion
Plug 'sheerun/vim-polyglot'

"" Polyglot plugins
" Python
Plug 'vim-python/python-syntax'
Plug 'Vimjas/vim-python-pep8-indent'
" Haskell
Plug 'neovimhaskell/haskell-vim'
" Docker
Plug 'ekalinin/Dockerfile.vim'
" GraphQL
Plug 'jparise/vim-graphql'
" Helm
Plug 'towolf/vim-helm'
" HTML5
Plug 'sheerun/html5.vim'
" JSON
Plug 'elzr/vim-json'
" Javascript
Plug 'pangloss/vim-javascript'
" Javascript -jsx extentions
Plug 'mxw/vim-jsx'

"" Pretty code
"Plug 'prettier/vim-prettier', {
"      \ 'do': 'yarn install' }

"" live edit html/css/js
"Plug 'turbio/bracey.vim'

"" eslint
"Plug 'eslint/eslint', {
"      \ 'do': 'yarn install' }

" Reasonml
Plug 'reasonml-editor/vim-reason-plus'
" Ansible
Plug 'pearofducks/ansible-vim'
" Log
Plug 'MTDL9/vim-log-highlighting'
" Markdown .md
Plug 'plasticboy/vim-markdown'
" RestructuredTextRuntime .rst
Plug 'marshallward/vim-restructuredtext'

" Dhall
Plug 'vmchale/dhall-vim'
Plug 'autozimu/LanguageClient-neovim', {
     \ 'branch': 'next',
     \ 'do': 'bash install.sh',
     \ }
Plug 'Chiel92/vim-autoformat'
" js
Plug 'othree/javascript-libraries-syntax.vim'
" python
Plug 'python-mode/python-mode'

"colorscheme
Plug 'fatih/molokai'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'fortes/vim-escuro'
Plug 'haishanh/night-owl.vim'
Plug 'morhetz/gruvbox'
Plug 'ajh17/spacegray.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'henrynewcomer/vim-theme-papaya'
Plug 'wolf-dog/nighted.vim'
Plug 'dikiaap/minimalist'
Plug 'cocopon/iceberg.vim'
Plug 'sjl/badwolf'
call plug#end()
""""" end plugged

" disable line numbers
" autocmd FileType python setlocal nonumber

" disable checking syntax on paste
set pastetoggle=<F2>

" Showing a different background colour in Vim past 80 characters
set colorcolumn=80
" copy the previous indentation on autoindenting
set copyindent
" ignore case in search
set ignorecase
" automatic wrap text > 80 im python f im python filesiles
au BufRead,BufNewFile *py setlocal textwidth=80

let g:solarized_termcolors = 256
silent! colorscheme molokai

filetype off
filetype plugin indent on

nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" remove automaticly whitespaces on the end of all files
autocmd BufWritePre * :%s/\s\+$//e

"remove preview about module to completion
autocmd FileType python setlocal completeopt-=preview

" the nerd tree - ctrl + n  enabled
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

""close vim if the only window left open is a NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
"map <C-n> :NERDTreeToggle<CR>

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=gray ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=236
let g:SimpylFold_docstring_preview = 1

""" Indent Guides
let g:indent_guides_enable_on_vim_startup = 1
let g:ident_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_color_change_percent = 80

""" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

""" syntasic
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 5
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
""Disable syntastic when open python files and you want python-mode
"let g:syntastic_ignore_files = ['\.py$']

let g:syntastic_python_checkers = ['mypy']
let g:syntastic_puppet_checkers = ['puppetlint']
let g:syntastic_ansible_checkers = ['ansiblelint']
let g:syntastic_yaml_checkers = ['yamlling']
let g:syntastic_vim_checkers = ['vimlint']
let g:syntastic_sh_checkers = ['shellcheck']
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_docker_checkers = ['dockerfile_lint']
let g:syntastic_python_pylint_args="--disable='fixme, line-too-long, logging-not-lazy, bad-whitespace, invalid-name, missing-docstring'"

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" ale
let b:ale_fixers = ['prettier', 'eslint']
let g:ale_completion_enabled = 1

" skip whole words with arrows
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"

"" Python-mode
"" Stop checking with pymode, but use synstastic.
"let g:pymode_lint = 0

"" Dhall
"let g:LanguageClient_serverCommands = {
"    \ 'dhall': ['dhall-lsp-server'],
"    \ }
"let g:dhall_format=1
"set signcolumn=yes
"set hidden
"nnoremap <F5> :call LanguageClient_contextMenu()<CR>
"nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
"" Highlight unicode symbols/chars
"highlight nonascii guibg=Red ctermbg=1 term=standout
"au BufReadPost * syntax match nonascii "[^\u0000-\u007F]"
"
"" autoformatter
"noremap <F3> :Autoformat<CR>
"let g:autoformat_autoindent = 0
"let g:autoformat_retab = 0
"let g:autoformat_remove_trailing_spaces = 0
"let g:formatdef_dhall_format = '"dhall --unicode format"'
"autocmd FileType css,scss,js let b:autoformat_autoindent=0

"" prettier
"au FileType css,scss,js let b:prettier_exec_cmd = "prettier-stylelint"
"let g:prettier#autoformat = 1

" Vim-polyglot
" let g:polyglot_disabled = ['tex']
