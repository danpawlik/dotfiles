"" To install/update/remove plugins from vimrc-common:
"" :source %
"" then:
"" to install plugins: :PlugInstall
"" to update plugins:  :PlugUpdate
"" to remove plugins:  :PlugClean

set encoding=utf-8
syntax on
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set t_Co=256
set background=dark
set shiftwidth=4
set hlsearch
set nofoldenable
set nocompatible
set wildmenu
set cursorline
set cursorcolumn
set showcmd
set smartindent
set smartcase
set nowrap
set ttyfast
set backspace=indent,eol,start
set updatetime=300
set shortmess+=c
set colorcolumn=80
set copyindent
set ignorecase

let g:go_version_warning = 0

" skip whole words with arrows
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"

" key mapping
set pastetoggle=<F2>
noremap <F3> :Autoformat<CR>
map <F4> :Prettier<CR>

filetype off
filetype plugin indent on

"" Vim-polyglot
let g:polyglot_disabled = ['js']

"""" plugged
call plug#begin('~/.vim/plugged')

" Helpers
" Automatic closing of brackets/tmux/statusline/fuzyy finder
Plug 'nathanaelkane/vim-indent-guides'
Plug 'raimondi/delimitMate'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/fzf'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'

" Git / shows git diff markers
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" syntax/snippets/
Plug 'dense-analysis/ale'
Plug 'sirver/ultisnips'

" languagepack collecion
Plug 'sheerun/vim-polyglot'

" Python
Plug 'python-mode/python-mode'
Plug 'vim-python/python-syntax'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'puremourning/vimspector'

" Haskell
Plug 'neovimhaskell/haskell-vim'

" Docker/Ansible/Helm
Plug 'ekalinin/Dockerfile.vim'
"Plug 'pearofducks/ansible-vim'
Plug 'towolf/vim-helm'

" JSON
Plug 'elzr/vim-json'

" Javascript/jsx/rescript/graphQL
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'mxw/vim-jsx'
Plug 'rescript-lang/vim-rescript'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'jparise/vim-graphql'
Plug 'sheerun/html5.vim'

" Pretty code
Plug 'prettier/vim-prettier', {
      \ 'do': 'npm install' }
Plug 'eslint/eslint'
Plug 'Chiel92/vim-autoformat'

" Log
Plug 'MTDL9/vim-log-highlighting'

" Markdown .md / RestructuredTextRuntime .rst
Plug 'plasticboy/vim-markdown'
Plug 'marshallward/vim-restructuredtext'

" Dhall
Plug 'vmchale/dhall-vim'
Plug 'autozimu/LanguageClient-neovim', {
     \ 'branch': 'next',
     \ 'do': 'bash install.sh',
     \ }

"colorscheme
Plug 'fatih/molokai'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'fortes/vim-escuro'
Plug 'haishanh/night-owl.vim'
Plug 'morhetz/gruvbox'
Plug 'ajh17/spacegray.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'henrynewcomer/vim-theme-papaya'
Plug 'wolf-dog/nighted.vim'
Plug 'dikiaap/minimalist'
Plug 'cocopon/iceberg.vim'
Plug 'sjl/badwolf'
call plug#end()
""""" end plugged

let g:solarized_termcolors = 256
silent! colorscheme molokai

" remove automaticly whitespaces on the end of all files / highlight whitechars
autocmd BufWritePre * :%s/\s\+$//e
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=gray ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=236

""" Indent Guides
let g:indent_guides_enable_on_vim_startup = 1
let g:ident_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_color_change_percent = 80

""" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" ale
let b:ale_linters = {
                  \  'javascript': ['eslint'],
                  \  'python': ['mypy'],
                  \  'puppet': ['puppetlint'],
                  \  'ansible': ['ansible-lint'],
                  \  'yaml': ['yamllint'],
                  \  'vim': ['vint'],
                  \  'shell': ['shellcheck'],
                  \  'json': ['jsonlint'],
                  \  'dockerfile': ['dockerfile_lint'],
                  \  'gitcommit': ['gitlint'],
                  \  'graphql': ['eslint'],
                  \  'go': ['gopls'],
                  \  'haskell': ['ghc', 'hls'],
                  \  'markdown': ['markdownlint'],
                  \  'ocaml': ['merlin'],
                  \  'pod': ['proselint'],
                  \  'reason': ['merlin', 'ols'],
                  \  'rst': ['rstcheck'],
                  \  'rust': ['cargo'],
                  \  'typescript': ['eslint', 'tslint']}

let b:ale_fixers = {
                  \  '*': ['remove_trailing_lines', 'trim_whitespace'],
                  \  'python': ['black', 'yapf'],
                  \  'javascript': ['eslint'],
                  \  'html': ['prettier'],
                  \  'go': ['gofmt'],
                  \  'json': ['prettier'],
                  \  'jsx': ['prettier'],
                  \  'markdown': ['prettier'],
                  \  'yaml': ['prettier']}

let g:ale_list_window_size = 3
let g:ale_completion_enabled = 1
" let g:ale_pattern_options = {'\.min.js$': {'ale_enabled': 0}}

"" Python

"" disable line numbers
" autocmd FileType python setlocal nonumber

"" Stop checking with pymode, but use synstastic.
"let g:pymode_lint = 0
" automatic wrap text > 80 im python f im python filesiles
au BufRead,BufNewFile *py setlocal textwidth=80
"remove preview about module to completion
autocmd FileType python setlocal completeopt-=preview

"" Dhall
let g:LanguageClient_serverCommands = {
    \ 'dhall': ['dhall-lsp-server'],
    \ }
let g:dhall_format=1
set signcolumn=yes
set hidden
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" Highlight unicode symbols/chars
highlight nonascii guibg=Red ctermbg=1 term=standout
au BufReadPost * syntax match nonascii "[^\u0000-\u007F]"

" autoformatter
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
let g:formatdef_dhall_format = '"dhall --unicode format"'
autocmd FileType vim,sh,js let b:autoformat_autoindent=0

" prettier
"let g:prettier#autoformat = 1
"let g:prettier#autoformat_require_pragma = 0
"let g:prettier#exec_cmd_async = 1
"let g:prettier#partial_format=1
"let g:prettier#quickfix_enabled = 1
"let g:prettier#config#print_width = '80'
"au FileType css,scss let b:prettier_exec_cmd = "prettier-stylelint"

"" Rescript
"autocmd FileType rescript nnoremap <silent> <buffer> <localleader>r :RescriptFormat<CR>
"autocmd FileType rescript nnoremap <silent> <buffer> <localleader>t :RescriptTypeHint<CR>
"autocmd FileType rescript nnoremap <silent> <buffer> <localleader>b :RescriptBuild<CR>
"autocmd FileType rescript nnoremap <silent> <buffer> gd :RescriptJumpToDefinition<CR>
